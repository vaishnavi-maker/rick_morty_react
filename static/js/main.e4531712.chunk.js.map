{"version":3,"sources":["component/search.js","component/card.js","component/pagination.js","component/filterBTN.js","component/category/gender.js","component/category/species.js","component/category/status.js","component/filter.js","component/navbar.js","component/category/inputlist.js","component/Location.js","component/Episodes.js","App.js","reportWebVitals.js","index.js"],"names":["search","updateSearch","updatePageno","className","onChange","e","target","value","type","placeholder","autoComplete","onClick","preventDefault","card","display","results","map","x","id","image","name","status","location","src","alt","pagination","info","pageno","nextLabel","previousLabel","nextClassName","previousClassName","pageClassName","pageLinkClassName","activeClassName","onPageChange","page","selected","forcePage","pageCount","pages","filterBTN","item","index","task","class","for","gender","updateGender","species","updateSpecies","updateStatus","filter","style","cursor","navbar","to","Episodelist","inputName","total","setID","Array","keys","Location","useState","fetchedData","updateFetchedData","dimension","locationno","updateLocation","updateResults","api","useEffect","a","fetch","then","res","json","data","console","log","Promise","all","residents","Episodes","air_date","episodeno","updateEpisode","characters","HomePage","App","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4531712.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function search({updateSearch , updatePageno}) {\r\n   \r\n   return (\r\n      <div>\r\n         <form className=\"formedit\" >\r\n            <input onChange={\r\n               (e)=>{\r\n                  updateSearch(e.target.value)\r\n                  //start from 1 page\r\n                  updatePageno(e.target.value)\r\n               }\r\n            } className=\"inputtext\" type=\"text\" placeholder=\"Enter Character name\" autoComplete=\"off\"/>\r\n            <input type=\"submit\" onClick={(e)=>{e.preventDefault()}}/>\r\n         </form>\r\n      </div>\r\n   )\r\n}\r\n","import React from 'react'\r\nimport \"./style.css\";\r\n\r\nexport default function card({results}) {\r\n\r\n   let display;     \r\n   if(results){\r\n      display = results.map((x) => {\r\n         let { id, image, name, status, location } = x;\r\n       \r\n           return (\r\n            <div key={id} className=\"col-4\">\r\n               <div className=\"card d-flex flex-column justify-content-center\">\r\n                  <img className='img img-fluid' src={image} alt=\"\" />\r\n                  <div className='content'>\r\n                     <div className=\"fw-bold\">{name}</div>\r\n                     <div className=\"fs-6\">Last Location </div>\r\n                     <div className=\"fs-5\">{location.name}</div>\r\n                     {(()=>{\r\n                        if(status==\"Alive\"){\r\n                           return(\r\n                              <div className=\"badge bg-success\">\r\n                                 {status}\r\n                              </div>\r\n                           )\r\n                        }\r\n                        else if(status==\"Dead\"){\r\n                           return(\r\n                              <div className=\"badge bg-danger\">\r\n                                 {status}\r\n                              </div>\r\n                           )\r\n                        }\r\n                        else{\r\n                           return(\r\n                              <div className=\"badge bg-secondary\">\r\n                                 {status}\r\n                              </div>\r\n                           )\r\n                        }\r\n                     })()}\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         );\r\n       });\r\n   }\r\n   else{\r\n      display=\"no character found\";\r\n   }\r\n   \r\n   return (\r\n      <>\r\n         {display}\r\n      </>\r\n   )\r\n   \r\n}\r\n","import React from 'react'\r\nimport ReactPaginate from 'react-paginate';\r\n\r\nexport default function pagination({info,pageno,updatePageno}) {\r\n   \r\n   /*const nextPage=()=>{\r\n     // alert(\"next page\")\r\n      updatePageno(cur_page=>cur_page+1)\r\n   }\r\n\r\n   const prevPage=()=>{\r\n      //alert(\"prev page\")\r\n      if(pageno===1) return;\r\n      updatePageno(cur_page=>cur_page-1)\r\n   }*/\r\n   \r\n   return (\r\n      <>\r\n         {\r\n            /* <button className=\"btn btn-primary\" onClick={prevPage}>\r\n               Prev\r\n            </button>\r\n            <button className=\"btn btn-primary\" onClick={nextPage}>\r\n               Next\r\n            </button>*/\r\n         } \r\n         <ReactPaginate \r\n            className=\"pagination justify-content-center gap-4 my-4\" \r\n            nextLabel=\"Next\"\r\n            previousLabel=\"Prev\"\r\n            nextClassName=\"btn btn-primary \"\r\n            previousClassName=\"btn btn-primary\"\r\n            pageClassName=\"page-item\"\r\n            pageLinkClassName=\"page-link\"\r\n            activeClassName=\"active\"\r\n            onPageChange={(page)=>{\r\n               updatePageno(page.selected+1)\r\n            }}\r\n            forcePage={pageno===1 ? 0 : pageno-1}\r\n            pageCount={info?.pages}\r\n         />\r\n      </>\r\n   )\r\n}\r\n","import React from 'react'\r\n\r\nfunction filterBTN({name,item,index,task,updatePageno}) {\r\n   return (\r\n      <div>\r\n         <div class=\"form-check\">\r\n            <input \r\n               class=\"form-check-input\" \r\n               onClick={()=>{\r\n                  updatePageno(1);\r\n                  task(item);\r\n               }}\r\n               type=\"radio\" \r\n               value=\"\" \r\n               name={name}\r\n               id={`${name}-${index}`}/>\r\n               <label class=\"form-check-label\" for={`${name}-${index}`}>\r\n                  {item}\r\n               </label>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default filterBTN\r\n","import React from 'react'\r\nimport FilterBTN from '../filterBTN'\r\n\r\nfunction gender({updateGender,updatePageno}) {\r\n   let gender1=[\"Female\",\"Male\",\"Genderless\",\"Unknown\"]\r\n   return (\r\n      <div class=\"accordion-item\">\r\n         <h2 class=\"accordion-header\" id=\"headingThree\">\r\n            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n               Gender\r\n            </button>\r\n         </h2>\r\n         <div id=\"collapseThree\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div class=\"accordion-body\">\r\n               {\r\n                  gender1.map((item,index)=>\r\n                  (<FilterBTN task={updateGender} updatePageno={updatePageno} key={index} index={index} name=\"Gender\" item={item}/>))\r\n               }\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default gender\r\n","import React from 'react'\r\nimport FilterBTN from '../filterBTN'\r\n\r\nfunction species({updateSpecies,updatePageno}) {\r\n   let species1=[\"Human\",\"Alien\",\"Humanoid\",\"Poopybutthole\",\"Mythological\",\"Unknown\",\"Animal\",\"Disease\",\"Robot\",\"Cronenberg\",\"Planet\"]\r\n   return (\r\n      <div class=\"accordion-item\">\r\n         <h2 class=\"accordion-header\" id=\"headingTwo\">\r\n            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n               Species\r\n            </button>\r\n         </h2>\r\n         <div id=\"collapseOne\" class=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div class=\"accordion-body\">\r\n               {\r\n                  species1.map((item,index)=>\r\n                  (<FilterBTN task={updateSpecies} updatePageno={updatePageno} key={index} index={index} name=\"Species\" item={item}/>))\r\n               }\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default species\r\n","import React from 'react'\r\nimport FilterBTN from '../filterBTN'\r\n\r\nfunction status({updateStatus,updatePageno}) {\r\n   let status1=[\"Alive\",\"Dead\",\"Unknown\"];\r\n   return (\r\n      <div class=\"accordion-item\">\r\n         <h2 class=\"accordion-header\" id=\"headingOne\">\r\n            <button class=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n               Status\r\n            </button>\r\n         </h2>\r\n         <div id=\"collapseTwo\" class=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div class=\"accordion-body\">\r\n               {\r\n                  status1.map((item,index)=>\r\n                  (<FilterBTN task={updateStatus} updatePageno={updatePageno} key={index} index={index} name=\"Status\" item={item}/>))\r\n               }\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default status\r\n","import React from 'react'\r\nimport Gender from \"./category/gender\";\r\nimport Species from \"./category/species\";\r\nimport Status from \"./category/status\";\r\n\r\nexport default function filter({updateStatus,updateGender,updateSpecies,updatePageno}) {\r\n   return (\r\n      <div className=\"col-3\">\r\n         <div className=\"text-center fw-bold fs-4 mb-2\">\r\n            Filter\r\n         </div>\r\n         <div \r\n            style={\r\n               {cursor:\"pointer\"}\r\n            }\r\n            onClick={()=>{\r\n               updateStatus(\"\")\r\n               updateGender(\"\")\r\n               updateSpecies(\"\")\r\n               updatePageno(1)\r\n            }}\r\n            className=\"text-center text-primary text-decoration-underline\">\r\n            clear filter\r\n         </div>\r\n\r\n         <div className=\"accordion my-3\" id=\"accordionExample\">\r\n            <Status updateStatus={updateStatus} updatePageno={updatePageno}/>\r\n            <Species updateSpecies={updateSpecies} updatePageno={updatePageno}/>\r\n            <Gender updateGender={updateGender} updatePageno={updatePageno}/>\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./style.css\";\r\n\r\nexport default function navbar() {\r\n   return (\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      <div className=\"fs-3 navbar-brand\">Rick and Morty Character Wiki</div>\r\n      <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNav\">\r\n         <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item active\">\r\n            <Link className=\"nav-link linki\" to=\"/\">Character</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link linki\" to=\"/Episodes\">Episode</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n            <Link className=\"nav-link linki\" to=\"/Location\">Location</Link>\r\n            </li>\r\n         </ul>\r\n      </div>\r\n      </nav>\r\n   )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Episodelist({inputName,total,setID}) {\r\n   //console.log([...Array(total).keys()])\r\n   return (\r\n      <div className=\"input-group mb-3\">\r\n         <select \r\n            className=\"custom-select\" \r\n            id=\"inputGroupSelect01\"\r\n            onChange={e=>{\r\n               setID(e.target.value)\r\n            }}>\r\n            <option selected>Choose ...</option>\r\n            {[...Array(total).keys()].map(x=>{\r\n               return <option value={x+1}>{inputName}-{x+1}</option>\r\n            })\r\n\r\n            }\r\n         </select>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Episodelist\r\n","import React from 'react'\r\nimport { useEffect , useState } from 'react';\r\nimport Card from \"./card\";\r\nimport Inputlist from './category/inputlist';\r\n\r\nfunction Location() {\r\n\r\n   let [fetchedData, updateFetchedData] = useState([]);\r\n   //destructure the content\r\n   let { name , dimension , type } = fetchedData;\r\n   let [locationno, updateLocation] = useState(1);\r\n   let [results, updateResults] = useState([]);\r\n\r\n   let api = `https://rickandmortyapi.com/api/location/${locationno}`;\r\n\r\n   useEffect(() => {\r\n      (async function () {\r\n        let data = await fetch(api).then((res) => res.json());\r\n        updateFetchedData(data);\r\n        console.log(data);\r\n        let a=await Promise.all(\r\n            data.residents.map((x)=>{\r\n               return fetch(x).then((res)=>res.json());\r\n            })\r\n         )\r\n         updateResults(a);\r\n      })();\r\n    }, [api]);\r\n\r\n   return (\r\n      <div className=\"container\">\r\n         <div className=\"row\">\r\n            <h1 className=\"text-center mt-3\">Location : \r\n               <span className=\"text-warning\">\r\n                  { name === \"\" ? \"unknown\" : name}\r\n               </span>\r\n            </h1>\r\n            <h5 className=\"text-center mt-2\">Dimension : {dimension === \"\" ? \"unknown\" : dimension}</h5>\r\n            <h5 className=\"text-center mt-2\">Type : {type === \"\" ? \"unknown\" : type}</h5>\r\n         </div>\r\n         <div className=\"row mt-3\">\r\n            <div className=\"col-3\">\r\n               <h4 className=\"text-center mb-4\">Pick Location</h4>\r\n               <Inputlist inputName=\"Location\" total={126} setID={updateLocation} />\r\n            </div>\r\n            <div className=\"col-8\">\r\n               <div className=\"row\">\r\n                  <Card results={results}/>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Location\r\n","import React from 'react'\r\nimport { useEffect , useState } from 'react';\r\nimport Card from \"./card\";\r\nimport Inputlist from './category/inputlist';\r\n\r\nfunction Episodes() {\r\n\r\n   let [fetchedData, updateFetchedData] = useState([]);\r\n   //destructure the content\r\n   let { air_date , name } = fetchedData;\r\n   let [episodeno, updateEpisode] = useState(1);\r\n   let [results, updateResults] = useState([]);\r\n\r\n   let api = `https://rickandmortyapi.com/api/episode/${episodeno}`;\r\n\r\n   useEffect(() => {\r\n      (async function () {\r\n        let data = await fetch(api).then((res) => res.json());\r\n        updateFetchedData(data);\r\n        console.log(data);\r\n        let a=await Promise.all(\r\n           data.characters.map((x)=>{\r\n              return fetch(x).then((res)=>res.json());\r\n           })\r\n        )\r\n        updateResults(a);\r\n      })();\r\n    }, [api]);\r\n\r\n\r\n\r\n   return (\r\n      <div className=\"container\">\r\n         <div className=\"row\">\r\n            <h1 className=\"text-center mt-3\">Episode name : \r\n               <span className=\"text-warning\">\r\n                  { name === \"\" ? \"unknown\" : name}\r\n               </span>\r\n            </h1>\r\n            <h5 className=\"text-center mt-2\">Air Date : {air_date === \"\" ? \"unknown\" : air_date}</h5>\r\n         </div>\r\n         <div className=\"row mt-3\">\r\n            <div className=\"col-3\">\r\n               <h4 className=\"text-center mb-4\">Pick Episode</h4>\r\n               <Inputlist inputName=\"Episode\" total={51} setID={updateEpisode} />\r\n            </div>\r\n            <div className=\"col-8\">\r\n               <div className=\"row\">\r\n                  <Card results={results}/>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Episodes\r\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap\";\nimport './App.css';\nimport Search from \"./component/search\";\nimport Card from \"./component/card\";\nimport Pagination from \"./component/pagination\";\nimport Filter from \"./component/filter\";\nimport Navbar from \"./component/navbar\";\nimport { useEffect , useState } from 'react';\nimport  Location from \"./component/Location\";\nimport  Episodes from \"./component/Episodes\";\n\nimport { BrowserRouter , Route , Routes } from \"react-router-dom\";\n\nfunction App(){\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Navbar/>\n      </div>\n      <Routes>\n        <Route exact path=\"/\" element={<HomePage/>}/>\n        <Route path=\"/Episodes\" element={<Episodes/>}/>\n        <Route path=\"/Location\" element={<Location/>}/>\n      </Routes>\n    </BrowserRouter>\n  )\n}\n\nconst HomePage=() =>{\n  let [pageno, updatePageno] = useState(1);\n  let [search, updateSearch] = useState(\"\");\n  let [status, updateStatus] = useState(\"\");\n  let [gender, updateGender] = useState(\"\");\n  let [species, updateSpecies] = useState(\"\");\n  //let pagen=7\n  let api = `https://rickandmortyapi.com/api/character/?page=${pageno}&name=${search}&status=${status}&gender=${gender}&species=${species}`\n\n  let [fetchedData, updateFetchedData] = useState([]);\n  //destructure the content\n  let { info, results } = fetchedData;\n\n  //after the new api change the this hook fetch new data\n  //whenever the api changes i want to fetch new data \n  useEffect(() => {\n    (async function () {\n      let data = await fetch(api).then((res) => res.json());\n      updateFetchedData(data);\n      console.log(data);\n    })();\n  }, [api]);\n  \n  return (\n    <div className=\"App\">\n      <Search updateSearch={updateSearch} updatePageno={updatePageno}/>\n      <div className=\"container\">\n        <div className=\"row\">\n            <Filter updateStatus={updateStatus} updateSpecies={updateSpecies} updateGender={updateGender} updatePageno={updatePageno}/>\n          <div className=\"col-lg-8 col-8\">\n            <div className=\"row gap-2 my-1\">\n              <Card results={results}/>\n            </div>\n          </div>\n        </div>\n      </div>\n      <Pagination info={info} pageno={pageno} updatePageno={updatePageno}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}